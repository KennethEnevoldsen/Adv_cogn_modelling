model {
  for (a in n_agents){
    delta[a] ~ dunif(0, 1)
    rho[a] ~   dunif(0, 1)
    phi[a] ~   dunif(0, 1)
    lambda[a] ~dunif(0, 1)
    
    # trial 1
    n[a, 1] <- 1
    c[a, 1] ~ dunif(0, n_tokens)
    for (tok in n_tokens){
      A[a, 1, tok] <- 0
    }
    
  }
  
  for (t in 2:n_trials){

    for (a in 1:n_agents){
      n[a, t] <- (rho[a]*n[a, t-1]) + 1  # eq. 2.1 (experience updating)
      
      for (aa in 1:n_agents){
        group_c[a, t-1, aa] <-  ifelse(a == aa, 0, c[aa, t-1])
      }
      for (tok in 1:n_tokens){
        
        t_1[a, t, tok] <- (phi[a]*n[a, t-1]*A[a, t-1, tok])
        t_2[a, t, tok] <- (delta[a] + ((1-delta[a])*(c_actual[a, t] == tok)))
        t_3[a, t, tok] <- ((((tok + sum(group_c[a, t-1,]))*pi)/n_agents)-tok)
        A[a, t, tok] <- (t_1[a, t, tok] + t_2[a, t ,tok] * t_3[a, t, tok])/n[a, t]
#        A[a, t, tok] <- (
#          (phi[a]*n[a, t-1]*A[a, t-1, tok]) +  # prior attraction
#            (delta[a] + ((1-delta[a])*(c_actual[a, t-1] == tok))) *  # indicates whether the token was chosen
#            ((((tok + sum(group_c[a, t-1,]))*pi)/n_agents)-tok)  # payoff for each possible contrib.
#        )/ n[a, t]  # experience weighting
        
        exp_A[a, t, tok] <- exp(lambda[a]*A[a, t, tok])
      }
      for (tok in n_tokens){
        p[a, t, tok] <- exp_A[a, t, tok]/sum(exp_A[a, t,])
      }
      
      c[a, t] ~ dcat(p[a, t, ])
    }
  }

}